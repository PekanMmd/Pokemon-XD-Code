%YAML 1.2
---

name: XDScript
file_extensions:
- xds
scope: xdscript

variables:
ident: '[A-Za-z_]([A-Za-z_0-9]*)'
number: '-?(\d+(\.\d+)?|\.\d+)'

contexts:

prototype:
- include: macros
- include: comments

main:
- match: '({{ident}}\s)(=)'
captures:
1: entity.assignment.xds
3: keyword.xds
- match: \b(define|call|assign|return|function|goto|if|ifFalse)\b
scope: keyword.xds
- match: '"'
push: string
- match: '\$:'
push: string_macro
- match: '({{ident}}_object)({{number}}?)\.'
captures:
1: constant.object.xds
3: constant.object.xds
- match: '({{ident}}_object)({{number}}?)'
scope: constant.object.xds
- match: '{{ident}}\.'
captures:
0: entity.callstd.xds
- match: '\b{{number}}\b'
scope: constant.numeric.xds
- match: '\b<\b'
push:  vector

vector:
- meta_include_prototype: false
- meta_scope: constant.vector.xds
- match: '\b>\b'
pop: true

string_macro:
- meta_scope: constant.macro.string.xds
- match: ':'
pop: true

string:
- meta_include_prototype: false
- meta_scope: string.quoted.double.xds
- match: '\['
push: string_escapes
- match: '{'
push: string_escape_params
- match: '"'
pop: true

string_escapes:
- meta_include_prototype: false
- meta_scope: string.escape.xds
- match: '\]'
pop: true


string_escape_params:
- meta_include_prototype: false
- meta_scope: string.escape.param.xds
- match: '}'
pop: true

macros:
- match: '(#{{ident}})\.'
captures:
1: constant.macro.callstd.xds
3: constant.macro.callstd.xds
- match: '#\b{{ident}}\b'
scope: constant.macro.xds
- match: '@\b{{ident}}\b'
scope: constant.location.xds

comments:
- match: '//'
push: comment
- match: '/\*'
push: commentMultiLine

comment:
- meta_include_prototype: false
- meta_scope: comment.line.xds
- match: '\n'
pop: true

commentMultiLine:
- meta_include_prototype: false
- meta_scope: comment.block.xds
- match: '\*/'
pop: true





